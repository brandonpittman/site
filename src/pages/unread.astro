---
import { getCollection } from "astro:content";

import Layout from "@layouts/Layout.astro";
import SearchForm from "@components/FinishedSearchForm.astro";
import UnreadItem from "@components/UnreadItem.astro";

import "core-js/proposals/array-grouping-v2";

let books = await getCollection("books");

let authors = [...new Set(books.map((b) => b.data.author))].sort();

let isRead = (b) => b.data.status === "read";
let read = books.filter(isRead);

let isReading = (b) => b.data.status === "reading";
let reading = books.filter(isReading);

let isUnread = (b) => b.data.status === "unread";
let unread = books.filter(isUnread);

let isAbandoned = (b) => b.data.status === "abandoned";
let abandoned = books.filter(isAbandoned);

let url = new URL(Astro.url);
let searchParams = url.searchParams;
let q = searchParams.get("q")?.trim();

if (q === "") {
  return Astro.redirect("/unread");
}

if (q) {
  let regex = new RegExp(q, "i");
  let filterFn = (v) =>
    v.data.title.match(regex) ||
    v.data?.genre?.match(regex) ||
    v.data?.author?.match(regex);
  unread = unread.filter(filterFn);
  read = read.filter(filterFn);
  reading = reading.filter(filterFn);
  abandoned = abandoned.filter(filterFn);
}
---

<Layout title="Unread - Brandon Pittman">
  <main class="region wrapper prose flow w-full">
    <h1 class="visually-hidden">Books</h1>

    <SearchForm placeholder="Search by title or authorâ€¦">
      {
        /*<datalist id="datalist">
        {authors.map((a) => <option value={a} />)}
      </datalist> */
      }
      Title
    </SearchForm>

    <section id="lists" class="flow">
      {
        unread.length ? (
          <article id="unread" class="flow">
            <h2>Unread</h2>
            <ul class="flow">
              {unread.map((book) => (
                <UnreadItem {...book} />
              ))}
            </ul>
          </article>
        ) : null
      }
      {
        reading.length ? (
          <article id="reading" class="flow">
            <h2>Reading</h2>
            <ul class="flow">
              {reading.map((book) => (
                <UnreadItem {...book} />
              ))}
            </ul>
          </article>
        ) : null
      }

      {
        read.length ? (
          <article id="read" class="flow">
            <h2>Read</h2>
            <ul class="flow">
              {read.map((book) => (
                <UnreadItem {...book} />
              ))}
            </ul>
          </article>
        ) : null
      }

      {
        abandoned.length ? (
          <article id="read" class="flow">
            <h2>Abandoned</h2>
            <ul class="flow">
              {abandoned.map((book) => (
                <UnreadItem {...book} />
              ))}
            </ul>
          </article>
        ) : null
      }
    </section>
  </main>
</Layout>
